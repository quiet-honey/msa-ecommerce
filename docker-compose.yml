# Docker Compose 파일의 버전 정의
version: "3.8"

services: # 여러 서비스를 정의
  user-service:
    # user-service의 컨테이너 이미지를 빌드할 때 사용할 Dockerfile 경로를 지정
    build: ./services/user-service

    # 로컬 머신의 8001번 포트를 컨테이너의 8000번 포트에 연결
    # FastAPI 서버가 8000 포트에서 실행되도록 설정하여 매핑
    ports:
      - "8001:8000"

    # 로컬 디렉토리를 컨테이너의 /app에 마운트
    volumes:
      - ./services/user-service:/app

    environment:
      MONGO_URI: "mongodb://$MONGO_USER:$MONGO_PASSWORD@mongo:27017" # MongoDB 연결 URI

    depends_on:
      - mongo # MongoDB가 먼저 실행되도록 설정

  product-service:
    # product-service의 컨테이너 이미지를 빌드할 때 사용할 Dockerfile 경로를 지정
    build: ./services/product-service

    # 로컬 머신의 8002번 포트를 컨테이너의 3000번 포트에 연결
    # NestJS 서버가 3000 포트에서 실행되도록 설정하여 매핑
    ports:
      - "8002:3000"

    volumes:
      - ./services/product-service:/app # 로컬 파일을 컨테이너에 마운트

    environment:
      POSTGRES_URI: "postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DATABASE" # PostgreSQL 연결 URI

    depends_on:
      - postgres # PostgreSQL이 먼저 실행되도록 설정

  order-service:
    # order-service의 컨테이너 이미지를 빌드할 때 사용할 Dockerfile 경로를 지정
    build: ./services/order-service

    # 로컬 머신의 8003번 포트를 컨테이너의 8080번 포트에 연결
    # Spring Boot 서버가 8080 포트에서 실행되도록 설정하여 매핑
    ports:
      - "8003:8080"

    volumes:
      - ./services/order-service/src:/app/src # 소스 코드 디렉토리를 컨테이너와 동기화

    environment:
      MYSQL_URI: "jdbc:mysql://mysql:3306/$MYSQL_DATABASE" # MySQL 연결 URI
      MYSQL_USER: "$MYSQL_USER"
      MYSQL_PASSWORD: "$MYSQL_PASSWORD"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      
    depends_on:
      - mysql # MySQL이 먼저 실행되도록 설정

  gateway:
    # API Gateway 컨테이너 이미지를 빌드할 때 사용할 Dockerfile 경로를 지정
    build: ./gateway

    # 호스트의 80번 포트를 컨테이너의 80번 포트와 매핑하여 외부에서 접근 가능하도록 설정
    ports:
      - "80:80"

    # Gateway가 실행되기 전에 시작되어야 하는 서비스들을 정의
    depends_on:
      - user-service # Gateway가 의존하는 user-service
      - product-service # Gateway가 의존하는 product-service
      - order-service # Gateway가 의존하는 order-service

  # MongoDB 컨테이너 설정
  mongo:
    image: mongo:latest

    ports:
      - "27018:27017" # 로컬에서의 포트:컨테이너에서의 포트

    environment:
      MONGO_INITDB_ROOT_USERNAME: $MONGO_USER
      MONGO_INITDB_ROOT_PASSWORD: $MONGO_PASSWORD

  # PSQL 컨테이너 설정
  postgres:
    image: postgres:latest

    ports:
      - "5433:5432"

    environment:
      POSTGRES_DB: $POSTGRES_DATABASE
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD

  # MySQL 컨테이너 설정
  mysql:
    image: mysql:latest

    ports:
      - "3307:3306"

    environment:
      MYSQL_DATABASE: $MYSQL_DATABASE
      MYSQL_ROOT_PASSWORD: $MYSQL_PASSWORD


  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.2.2
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafdrop:
    image: obsidiandynamics/kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092" # Kafka 브로커 주소
    depends_on:
      - kafka